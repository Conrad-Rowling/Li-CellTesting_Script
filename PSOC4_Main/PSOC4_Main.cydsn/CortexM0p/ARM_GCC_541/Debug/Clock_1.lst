ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Clock_1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Clock_1_StartEx,"ax",%progbits
  20              		.align	2
  21              		.global	Clock_1_StartEx
  22              		.code	16
  23              		.thumb_func
  24              		.type	Clock_1_StartEx, %function
  25              	Clock_1_StartEx:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\Clock_1.c"
   1:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/Clock_1.c **** * File Name: Clock_1.c
   3:Generated_Source\PSoC4/Clock_1.c **** * Version 2.20
   4:Generated_Source\PSoC4/Clock_1.c **** *
   5:Generated_Source\PSoC4/Clock_1.c **** *  Description:
   6:Generated_Source\PSoC4/Clock_1.c **** *   Provides system API for the clocking, interrupts and watchdog timer.
   7:Generated_Source\PSoC4/Clock_1.c **** *
   8:Generated_Source\PSoC4/Clock_1.c **** *  Note:
   9:Generated_Source\PSoC4/Clock_1.c **** *   Documentation of the API's in this file is located in the
  10:Generated_Source\PSoC4/Clock_1.c **** *   System Reference Guide provided with PSoC Creator.
  11:Generated_Source\PSoC4/Clock_1.c **** *
  12:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
  13:Generated_Source\PSoC4/Clock_1.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/Clock_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/Clock_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/Clock_1.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/Clock_1.c **** 
  19:Generated_Source\PSoC4/Clock_1.c **** #include <cydevice_trm.h>
  20:Generated_Source\PSoC4/Clock_1.c **** #include "Clock_1.h"
  21:Generated_Source\PSoC4/Clock_1.c **** 
  22:Generated_Source\PSoC4/Clock_1.c **** #if defined CYREG_PERI_DIV_CMD
  23:Generated_Source\PSoC4/Clock_1.c **** 
  24:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_StartEx
  26:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
  27:Generated_Source\PSoC4/Clock_1.c **** *
  28:Generated_Source\PSoC4/Clock_1.c **** * Summary:
  29:Generated_Source\PSoC4/Clock_1.c **** *  Starts the clock, aligned to the specified running clock.
  30:Generated_Source\PSoC4/Clock_1.c **** *
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 2


  31:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
  32:Generated_Source\PSoC4/Clock_1.c **** *  alignClkDiv:  The divider to which phase alignment is performed when the
  33:Generated_Source\PSoC4/Clock_1.c **** *    clock is started.
  34:Generated_Source\PSoC4/Clock_1.c **** *
  35:Generated_Source\PSoC4/Clock_1.c **** * Returns:
  36:Generated_Source\PSoC4/Clock_1.c **** *  None
  37:Generated_Source\PSoC4/Clock_1.c **** *
  38:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
  39:Generated_Source\PSoC4/Clock_1.c **** void Clock_1_StartEx(uint32 alignClkDiv)
  40:Generated_Source\PSoC4/Clock_1.c **** {
  28              		.loc 1 40 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              	.L2:
  41:Generated_Source\PSoC4/Clock_1.c ****     /* Make sure any previous start command has finished. */
  42:Generated_Source\PSoC4/Clock_1.c ****     while((Clock_1_CMD_REG & Clock_1_CMD_ENABLE_MASK) != 0u)
  35              		.loc 1 42 0 discriminator 1
  36 0000 8023     		movs	r3, #128
  37 0002 DB05     		lsls	r3, r3, #23
  38 0004 1B68     		ldr	r3, [r3]
  39 0006 002B     		cmp	r3, #0
  40 0008 FADB     		blt	.L2
  43:Generated_Source\PSoC4/Clock_1.c ****     {
  44:Generated_Source\PSoC4/Clock_1.c ****     }
  45:Generated_Source\PSoC4/Clock_1.c ****     
  46:Generated_Source\PSoC4/Clock_1.c ****     /* Specify the target divider and it's alignment divider, and enable. */
  47:Generated_Source\PSoC4/Clock_1.c ****     Clock_1_CMD_REG =
  48:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)Clock_1__DIV_ID << Clock_1_CMD_DIV_SHIFT)|
  49:Generated_Source\PSoC4/Clock_1.c ****         (alignClkDiv << Clock_1_CMD_PA_DIV_SHIFT) |
  41              		.loc 1 49 0
  42 000a 0002     		lsls	r0, r0, #8
  43              	.LVL1:
  44 000c 024B     		ldr	r3, .L3
  45 000e 1843     		orrs	r0, r3
  47:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)Clock_1__DIV_ID << Clock_1_CMD_DIV_SHIFT)|
  46              		.loc 1 47 0
  47 0010 8023     		movs	r3, #128
  48 0012 DB05     		lsls	r3, r3, #23
  49 0014 1860     		str	r0, [r3]
  50:Generated_Source\PSoC4/Clock_1.c ****         (uint32)Clock_1_CMD_ENABLE_MASK;
  51:Generated_Source\PSoC4/Clock_1.c **** }
  50              		.loc 1 51 0
  51              		@ sp needed
  52 0016 7047     		bx	lr
  53              	.L4:
  54              		.align	2
  55              	.L3:
  56 0018 C0000080 		.word	-2147483456
  57              		.cfi_endproc
  58              	.LFE0:
  59              		.size	Clock_1_StartEx, .-Clock_1_StartEx
  60              		.section	.text.Clock_1_Stop,"ax",%progbits
  61              		.align	2
  62              		.global	Clock_1_Stop
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 3


  63              		.code	16
  64              		.thumb_func
  65              		.type	Clock_1_Stop, %function
  66              	Clock_1_Stop:
  67              	.LFB1:
  52:Generated_Source\PSoC4/Clock_1.c **** 
  53:Generated_Source\PSoC4/Clock_1.c **** #else
  54:Generated_Source\PSoC4/Clock_1.c **** 
  55:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
  56:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_Start
  57:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
  58:Generated_Source\PSoC4/Clock_1.c **** *
  59:Generated_Source\PSoC4/Clock_1.c **** * Summary:
  60:Generated_Source\PSoC4/Clock_1.c **** *  Starts the clock.
  61:Generated_Source\PSoC4/Clock_1.c **** *
  62:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
  63:Generated_Source\PSoC4/Clock_1.c **** *  None
  64:Generated_Source\PSoC4/Clock_1.c **** *
  65:Generated_Source\PSoC4/Clock_1.c **** * Returns:
  66:Generated_Source\PSoC4/Clock_1.c **** *  None
  67:Generated_Source\PSoC4/Clock_1.c **** *
  68:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
  69:Generated_Source\PSoC4/Clock_1.c **** 
  70:Generated_Source\PSoC4/Clock_1.c **** void Clock_1_Start(void)
  71:Generated_Source\PSoC4/Clock_1.c **** {
  72:Generated_Source\PSoC4/Clock_1.c ****     /* Set the bit to enable the clock. */
  73:Generated_Source\PSoC4/Clock_1.c ****     Clock_1_ENABLE_REG |= Clock_1__ENABLE_MASK;
  74:Generated_Source\PSoC4/Clock_1.c **** }
  75:Generated_Source\PSoC4/Clock_1.c **** 
  76:Generated_Source\PSoC4/Clock_1.c **** #endif /* CYREG_PERI_DIV_CMD */
  77:Generated_Source\PSoC4/Clock_1.c **** 
  78:Generated_Source\PSoC4/Clock_1.c **** 
  79:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
  80:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_Stop
  81:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
  82:Generated_Source\PSoC4/Clock_1.c **** *
  83:Generated_Source\PSoC4/Clock_1.c **** * Summary:
  84:Generated_Source\PSoC4/Clock_1.c **** *  Stops the clock and returns immediately. This API does not require the
  85:Generated_Source\PSoC4/Clock_1.c **** *  source clock to be running but may return before the hardware is actually
  86:Generated_Source\PSoC4/Clock_1.c **** *  disabled.
  87:Generated_Source\PSoC4/Clock_1.c **** *
  88:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
  89:Generated_Source\PSoC4/Clock_1.c **** *  None
  90:Generated_Source\PSoC4/Clock_1.c **** *
  91:Generated_Source\PSoC4/Clock_1.c **** * Returns:
  92:Generated_Source\PSoC4/Clock_1.c **** *  None
  93:Generated_Source\PSoC4/Clock_1.c **** *
  94:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
  95:Generated_Source\PSoC4/Clock_1.c **** void Clock_1_Stop(void)
  96:Generated_Source\PSoC4/Clock_1.c **** {
  68              		.loc 1 96 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L6:
  97:Generated_Source\PSoC4/Clock_1.c **** #if defined CYREG_PERI_DIV_CMD
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 4


  98:Generated_Source\PSoC4/Clock_1.c **** 
  99:Generated_Source\PSoC4/Clock_1.c ****     /* Make sure any previous start command has finished. */
 100:Generated_Source\PSoC4/Clock_1.c ****     while((Clock_1_CMD_REG & Clock_1_CMD_ENABLE_MASK) != 0u)
  74              		.loc 1 100 0 discriminator 1
  75 0000 8023     		movs	r3, #128
  76 0002 DB05     		lsls	r3, r3, #23
  77 0004 1B68     		ldr	r3, [r3]
  78 0006 002B     		cmp	r3, #0
  79 0008 FADB     		blt	.L6
 101:Generated_Source\PSoC4/Clock_1.c ****     {
 102:Generated_Source\PSoC4/Clock_1.c ****     }
 103:Generated_Source\PSoC4/Clock_1.c ****     
 104:Generated_Source\PSoC4/Clock_1.c ****     /* Specify the target divider and it's alignment divider, and disable. */
 105:Generated_Source\PSoC4/Clock_1.c ****     Clock_1_CMD_REG =
  80              		.loc 1 105 0
  81 000a 024A     		ldr	r2, .L7
  82 000c 8023     		movs	r3, #128
  83 000e DB05     		lsls	r3, r3, #23
  84 0010 1A60     		str	r2, [r3]
 106:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)Clock_1__DIV_ID << Clock_1_CMD_DIV_SHIFT)|
 107:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)Clock_1_CMD_DISABLE_MASK);
 108:Generated_Source\PSoC4/Clock_1.c **** 
 109:Generated_Source\PSoC4/Clock_1.c **** #else
 110:Generated_Source\PSoC4/Clock_1.c **** 
 111:Generated_Source\PSoC4/Clock_1.c ****     /* Clear the bit to disable the clock. */
 112:Generated_Source\PSoC4/Clock_1.c ****     Clock_1_ENABLE_REG &= (uint32)(~Clock_1__ENABLE_MASK);
 113:Generated_Source\PSoC4/Clock_1.c ****     
 114:Generated_Source\PSoC4/Clock_1.c **** #endif /* CYREG_PERI_DIV_CMD */
 115:Generated_Source\PSoC4/Clock_1.c **** }
  85              		.loc 1 115 0
  86              		@ sp needed
  87 0012 7047     		bx	lr
  88              	.L8:
  89              		.align	2
  90              	.L7:
  91 0014 C0000040 		.word	1073742016
  92              		.cfi_endproc
  93              	.LFE1:
  94              		.size	Clock_1_Stop, .-Clock_1_Stop
  95              		.section	.text.Clock_1_SetFractionalDividerRegister,"ax",%progbits
  96              		.align	2
  97              		.global	Clock_1_SetFractionalDividerRegister
  98              		.code	16
  99              		.thumb_func
 100              		.type	Clock_1_SetFractionalDividerRegister, %function
 101              	Clock_1_SetFractionalDividerRegister:
 102              	.LFB2:
 116:Generated_Source\PSoC4/Clock_1.c **** 
 117:Generated_Source\PSoC4/Clock_1.c **** 
 118:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
 119:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_SetFractionalDividerRegister
 120:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
 121:Generated_Source\PSoC4/Clock_1.c **** *
 122:Generated_Source\PSoC4/Clock_1.c **** * Summary:
 123:Generated_Source\PSoC4/Clock_1.c **** *  Modifies the clock divider and the fractional divider.
 124:Generated_Source\PSoC4/Clock_1.c **** *
 125:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 5


 126:Generated_Source\PSoC4/Clock_1.c **** *  clkDivider:  Divider register value (0-65535). This value is NOT the
 127:Generated_Source\PSoC4/Clock_1.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 128:Generated_Source\PSoC4/Clock_1.c **** *    to divide the clock by 2, this parameter should be set to 1.
 129:Generated_Source\PSoC4/Clock_1.c **** *  fracDivider:  Fractional Divider register value (0-31).
 130:Generated_Source\PSoC4/Clock_1.c **** * Returns:
 131:Generated_Source\PSoC4/Clock_1.c **** *  None
 132:Generated_Source\PSoC4/Clock_1.c **** *
 133:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
 134:Generated_Source\PSoC4/Clock_1.c **** void Clock_1_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional)
 135:Generated_Source\PSoC4/Clock_1.c **** {
 103              		.loc 1 135 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              	.LVL2:
 108 0000 10B5     		push	{r4, lr}
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 4, -8
 111              		.cfi_offset 14, -4
 136:Generated_Source\PSoC4/Clock_1.c ****     uint32 maskVal;
 137:Generated_Source\PSoC4/Clock_1.c ****     uint32 regVal;
 138:Generated_Source\PSoC4/Clock_1.c ****     
 139:Generated_Source\PSoC4/Clock_1.c **** #if defined (Clock_1__FRAC_MASK) || defined (CYREG_PERI_DIV_CMD)
 140:Generated_Source\PSoC4/Clock_1.c ****     
 141:Generated_Source\PSoC4/Clock_1.c **** 	/* get all but divider bits */
 142:Generated_Source\PSoC4/Clock_1.c ****     maskVal = Clock_1_DIV_REG & 
 112              		.loc 1 142 0
 113 0002 064A     		ldr	r2, .L10
 114 0004 1368     		ldr	r3, [r2]
 115 0006 0724     		movs	r4, #7
 116 0008 2340     		ands	r3, r4
 117              	.LVL3:
 143:Generated_Source\PSoC4/Clock_1.c ****                     (uint32)(~(uint32)(Clock_1_DIV_INT_MASK | Clock_1_DIV_FRAC_MASK)); 
 144:Generated_Source\PSoC4/Clock_1.c **** 	/* combine mask and new divider vals into 32-bit value */
 145:Generated_Source\PSoC4/Clock_1.c ****     regVal = maskVal |
 146:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)((uint32)clkDivider <<  Clock_1_DIV_INT_SHIFT) & Clock_1_DIV_INT_MASK) |
 118              		.loc 1 146 0
 119 000a 0002     		lsls	r0, r0, #8
 120              	.LVL4:
 145:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)((uint32)clkDivider <<  Clock_1_DIV_INT_SHIFT) & Clock_1_DIV_INT_MASK) |
 121              		.loc 1 145 0
 122 000c 1843     		orrs	r0, r3
 147:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)((uint32)clkFractional << Clock_1_DIV_FRAC_SHIFT) & Clock_1_DIV_FRAC_MASK);
 123              		.loc 1 147 0
 124 000e CB00     		lsls	r3, r1, #3
 125              	.LVL5:
 126 0010 FF21     		movs	r1, #255
 127              	.LVL6:
 128 0012 1940     		ands	r1, r3
 145:Generated_Source\PSoC4/Clock_1.c ****         ((uint32)((uint32)clkDivider <<  Clock_1_DIV_INT_SHIFT) & Clock_1_DIV_INT_MASK) |
 129              		.loc 1 145 0
 130 0014 0143     		orrs	r1, r0
 131              	.LVL7:
 148:Generated_Source\PSoC4/Clock_1.c ****     
 149:Generated_Source\PSoC4/Clock_1.c **** #else
 150:Generated_Source\PSoC4/Clock_1.c ****     /* get all but integer divider bits */
 151:Generated_Source\PSoC4/Clock_1.c ****     maskVal = Clock_1_DIV_REG & (uint32)(~(uint32)Clock_1__DIVIDER_MASK);
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 6


 152:Generated_Source\PSoC4/Clock_1.c ****     /* combine mask and new divider val into 32-bit value */
 153:Generated_Source\PSoC4/Clock_1.c ****     regVal = clkDivider | maskVal;
 154:Generated_Source\PSoC4/Clock_1.c ****     
 155:Generated_Source\PSoC4/Clock_1.c **** #endif /* Clock_1__FRAC_MASK || CYREG_PERI_DIV_CMD */
 156:Generated_Source\PSoC4/Clock_1.c **** 
 157:Generated_Source\PSoC4/Clock_1.c ****     Clock_1_DIV_REG = regVal;
 132              		.loc 1 157 0
 133 0016 1160     		str	r1, [r2]
 158:Generated_Source\PSoC4/Clock_1.c **** }
 134              		.loc 1 158 0
 135              		@ sp needed
 136 0018 10BD     		pop	{r4, pc}
 137              	.L11:
 138 001a C046     		.align	2
 139              	.L10:
 140 001c 00050040 		.word	1073743104
 141              		.cfi_endproc
 142              	.LFE2:
 143              		.size	Clock_1_SetFractionalDividerRegister, .-Clock_1_SetFractionalDividerRegister
 144              		.section	.text.Clock_1_GetDividerRegister,"ax",%progbits
 145              		.align	2
 146              		.global	Clock_1_GetDividerRegister
 147              		.code	16
 148              		.thumb_func
 149              		.type	Clock_1_GetDividerRegister, %function
 150              	Clock_1_GetDividerRegister:
 151              	.LFB3:
 159:Generated_Source\PSoC4/Clock_1.c **** 
 160:Generated_Source\PSoC4/Clock_1.c **** 
 161:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
 162:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_GetDividerRegister
 163:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
 164:Generated_Source\PSoC4/Clock_1.c **** *
 165:Generated_Source\PSoC4/Clock_1.c **** * Summary:
 166:Generated_Source\PSoC4/Clock_1.c **** *  Gets the clock divider register value.
 167:Generated_Source\PSoC4/Clock_1.c **** *
 168:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
 169:Generated_Source\PSoC4/Clock_1.c **** *  None
 170:Generated_Source\PSoC4/Clock_1.c **** *
 171:Generated_Source\PSoC4/Clock_1.c **** * Returns:
 172:Generated_Source\PSoC4/Clock_1.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 173:Generated_Source\PSoC4/Clock_1.c **** *  divide by 2, the return value will be 1.
 174:Generated_Source\PSoC4/Clock_1.c **** *
 175:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
 176:Generated_Source\PSoC4/Clock_1.c **** uint16 Clock_1_GetDividerRegister(void)
 177:Generated_Source\PSoC4/Clock_1.c **** {
 152              		.loc 1 177 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 178:Generated_Source\PSoC4/Clock_1.c ****     return (uint16)((Clock_1_DIV_REG & Clock_1_DIV_INT_MASK)
 157              		.loc 1 178 0
 158 0000 024B     		ldr	r3, .L13
 159 0002 1868     		ldr	r0, [r3]
 160 0004 000A     		lsrs	r0, r0, #8
 161 0006 80B2     		uxth	r0, r0
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 7


 179:Generated_Source\PSoC4/Clock_1.c ****         >> Clock_1_DIV_INT_SHIFT);
 180:Generated_Source\PSoC4/Clock_1.c **** }
 162              		.loc 1 180 0
 163              		@ sp needed
 164 0008 7047     		bx	lr
 165              	.L14:
 166 000a C046     		.align	2
 167              	.L13:
 168 000c 00050040 		.word	1073743104
 169              		.cfi_endproc
 170              	.LFE3:
 171              		.size	Clock_1_GetDividerRegister, .-Clock_1_GetDividerRegister
 172              		.section	.text.Clock_1_GetFractionalDividerRegister,"ax",%progbits
 173              		.align	2
 174              		.global	Clock_1_GetFractionalDividerRegister
 175              		.code	16
 176              		.thumb_func
 177              		.type	Clock_1_GetFractionalDividerRegister, %function
 178              	Clock_1_GetFractionalDividerRegister:
 179              	.LFB4:
 181:Generated_Source\PSoC4/Clock_1.c **** 
 182:Generated_Source\PSoC4/Clock_1.c **** 
 183:Generated_Source\PSoC4/Clock_1.c **** /*******************************************************************************
 184:Generated_Source\PSoC4/Clock_1.c **** * Function Name: Clock_1_GetFractionalDividerRegister
 185:Generated_Source\PSoC4/Clock_1.c **** ********************************************************************************
 186:Generated_Source\PSoC4/Clock_1.c **** *
 187:Generated_Source\PSoC4/Clock_1.c **** * Summary:
 188:Generated_Source\PSoC4/Clock_1.c **** *  Gets the clock fractional divider register value.
 189:Generated_Source\PSoC4/Clock_1.c **** *
 190:Generated_Source\PSoC4/Clock_1.c **** * Parameters:
 191:Generated_Source\PSoC4/Clock_1.c **** *  None
 192:Generated_Source\PSoC4/Clock_1.c **** *
 193:Generated_Source\PSoC4/Clock_1.c **** * Returns:
 194:Generated_Source\PSoC4/Clock_1.c **** *  Fractional Divide value of the clock
 195:Generated_Source\PSoC4/Clock_1.c **** *  0 if the fractional divider is not in use.
 196:Generated_Source\PSoC4/Clock_1.c **** *
 197:Generated_Source\PSoC4/Clock_1.c **** *******************************************************************************/
 198:Generated_Source\PSoC4/Clock_1.c **** uint8 Clock_1_GetFractionalDividerRegister(void)
 199:Generated_Source\PSoC4/Clock_1.c **** {
 180              		.loc 1 199 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 200:Generated_Source\PSoC4/Clock_1.c **** #if defined (Clock_1__FRAC_MASK)
 201:Generated_Source\PSoC4/Clock_1.c ****     /* return fractional divider bits */
 202:Generated_Source\PSoC4/Clock_1.c ****     return (uint8)((Clock_1_DIV_REG & Clock_1_DIV_FRAC_MASK)
 185              		.loc 1 202 0
 186 0000 024B     		ldr	r3, .L16
 187 0002 1868     		ldr	r0, [r3]
 203:Generated_Source\PSoC4/Clock_1.c ****         >> Clock_1_DIV_FRAC_SHIFT);
 188              		.loc 1 203 0
 189 0004 C008     		lsrs	r0, r0, #3
 202:Generated_Source\PSoC4/Clock_1.c ****         >> Clock_1_DIV_FRAC_SHIFT);
 190              		.loc 1 202 0
 191 0006 1F23     		movs	r3, #31
 192 0008 1840     		ands	r0, r3
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 8


 204:Generated_Source\PSoC4/Clock_1.c **** #else
 205:Generated_Source\PSoC4/Clock_1.c ****     return 0u;
 206:Generated_Source\PSoC4/Clock_1.c **** #endif /* Clock_1__FRAC_MASK */
 207:Generated_Source\PSoC4/Clock_1.c **** }
 193              		.loc 1 207 0
 194              		@ sp needed
 195 000a 7047     		bx	lr
 196              	.L17:
 197              		.align	2
 198              	.L16:
 199 000c 00050040 		.word	1073743104
 200              		.cfi_endproc
 201              	.LFE4:
 202              		.size	Clock_1_GetFractionalDividerRegister, .-Clock_1_GetFractionalDividerRegister
 203              		.text
 204              	.Letext0:
 205              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 206              		.section	.debug_info,"",%progbits
 207              	.Ldebug_info0:
 208 0000 62010000 		.4byte	0x162
 209 0004 0400     		.2byte	0x4
 210 0006 00000000 		.4byte	.Ldebug_abbrev0
 211 000a 04       		.byte	0x4
 212 000b 01       		.uleb128 0x1
 213 000c B2010000 		.4byte	.LASF25
 214 0010 0C       		.byte	0xc
 215 0011 91010000 		.4byte	.LASF26
 216 0015 06000000 		.4byte	.LASF27
 217 0019 00000000 		.4byte	.Ldebug_ranges0+0
 218 001d 00000000 		.4byte	0
 219 0021 00000000 		.4byte	.Ldebug_line0
 220 0025 02       		.uleb128 0x2
 221 0026 01       		.byte	0x1
 222 0027 06       		.byte	0x6
 223 0028 44020000 		.4byte	.LASF0
 224 002c 02       		.uleb128 0x2
 225 002d 01       		.byte	0x1
 226 002e 08       		.byte	0x8
 227 002f 83000000 		.4byte	.LASF1
 228 0033 02       		.uleb128 0x2
 229 0034 02       		.byte	0x2
 230 0035 05       		.byte	0x5
 231 0036 53010000 		.4byte	.LASF2
 232 003a 02       		.uleb128 0x2
 233 003b 02       		.byte	0x2
 234 003c 07       		.byte	0x7
 235 003d A3000000 		.4byte	.LASF3
 236 0041 02       		.uleb128 0x2
 237 0042 04       		.byte	0x4
 238 0043 05       		.byte	0x5
 239 0044 88010000 		.4byte	.LASF4
 240 0048 02       		.uleb128 0x2
 241 0049 04       		.byte	0x4
 242 004a 07       		.byte	0x7
 243 004b 91000000 		.4byte	.LASF5
 244 004f 02       		.uleb128 0x2
 245 0050 08       		.byte	0x8
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 9


 246 0051 05       		.byte	0x5
 247 0052 40010000 		.4byte	.LASF6
 248 0056 02       		.uleb128 0x2
 249 0057 08       		.byte	0x8
 250 0058 07       		.byte	0x7
 251 0059 04010000 		.4byte	.LASF7
 252 005d 03       		.uleb128 0x3
 253 005e 04       		.byte	0x4
 254 005f 05       		.byte	0x5
 255 0060 696E7400 		.ascii	"int\000"
 256 0064 02       		.uleb128 0x2
 257 0065 04       		.byte	0x4
 258 0066 07       		.byte	0x7
 259 0067 F7000000 		.4byte	.LASF8
 260 006b 04       		.uleb128 0x4
 261 006c 5D010000 		.4byte	.LASF9
 262 0070 02       		.byte	0x2
 263 0071 FB01     		.2byte	0x1fb
 264 0073 2C000000 		.4byte	0x2c
 265 0077 04       		.uleb128 0x4
 266 0078 E9000000 		.4byte	.LASF10
 267 007c 02       		.byte	0x2
 268 007d FC01     		.2byte	0x1fc
 269 007f 3A000000 		.4byte	0x3a
 270 0083 04       		.uleb128 0x4
 271 0084 F0000000 		.4byte	.LASF11
 272 0088 02       		.byte	0x2
 273 0089 FD01     		.2byte	0x1fd
 274 008b 48000000 		.4byte	0x48
 275 008f 02       		.uleb128 0x2
 276 0090 04       		.byte	0x4
 277 0091 04       		.byte	0x4
 278 0092 60000000 		.4byte	.LASF12
 279 0096 02       		.uleb128 0x2
 280 0097 08       		.byte	0x8
 281 0098 04       		.byte	0x4
 282 0099 C1000000 		.4byte	.LASF13
 283 009d 02       		.uleb128 0x2
 284 009e 01       		.byte	0x1
 285 009f 08       		.byte	0x8
 286 00a0 4E010000 		.4byte	.LASF14
 287 00a4 04       		.uleb128 0x4
 288 00a5 00000000 		.4byte	.LASF15
 289 00a9 02       		.byte	0x2
 290 00aa A702     		.2byte	0x2a7
 291 00ac B0000000 		.4byte	0xb0
 292 00b0 05       		.uleb128 0x5
 293 00b1 83000000 		.4byte	0x83
 294 00b5 06       		.uleb128 0x6
 295 00b6 66000000 		.4byte	.LASF16
 296 00ba 01       		.byte	0x1
 297 00bb 27       		.byte	0x27
 298 00bc 00000000 		.4byte	.LFB0
 299 00c0 1C000000 		.4byte	.LFE0-.LFB0
 300 00c4 01       		.uleb128 0x1
 301 00c5 9C       		.byte	0x9c
 302 00c6 DA000000 		.4byte	0xda
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 10


 303 00ca 07       		.uleb128 0x7
 304 00cb CF000000 		.4byte	.LASF18
 305 00cf 01       		.byte	0x1
 306 00d0 27       		.byte	0x27
 307 00d1 83000000 		.4byte	0x83
 308 00d5 00000000 		.4byte	.LLST0
 309 00d9 00       		.byte	0
 310 00da 08       		.uleb128 0x8
 311 00db 76000000 		.4byte	.LASF28
 312 00df 01       		.byte	0x1
 313 00e0 5F       		.byte	0x5f
 314 00e1 00000000 		.4byte	.LFB1
 315 00e5 18000000 		.4byte	.LFE1-.LFB1
 316 00e9 01       		.uleb128 0x1
 317 00ea 9C       		.byte	0x9c
 318 00eb 06       		.uleb128 0x6
 319 00ec 63010000 		.4byte	.LASF17
 320 00f0 01       		.byte	0x1
 321 00f1 86       		.byte	0x86
 322 00f2 00000000 		.4byte	.LFB2
 323 00f6 20000000 		.4byte	.LFE2-.LFB2
 324 00fa 01       		.uleb128 0x1
 325 00fb 9C       		.byte	0x9c
 326 00fc 3B010000 		.4byte	0x13b
 327 0100 07       		.uleb128 0x7
 328 0101 B6000000 		.4byte	.LASF19
 329 0105 01       		.byte	0x1
 330 0106 86       		.byte	0x86
 331 0107 77000000 		.4byte	0x77
 332 010b 21000000 		.4byte	.LLST1
 333 010f 07       		.uleb128 0x7
 334 0110 DB000000 		.4byte	.LASF20
 335 0114 01       		.byte	0x1
 336 0115 86       		.byte	0x86
 337 0116 6B000000 		.4byte	0x6b
 338 011a 42000000 		.4byte	.LLST2
 339 011e 09       		.uleb128 0x9
 340 011f 58000000 		.4byte	.LASF21
 341 0123 01       		.byte	0x1
 342 0124 88       		.byte	0x88
 343 0125 83000000 		.4byte	0x83
 344 0129 63000000 		.4byte	.LLST3
 345 012d 0A       		.uleb128 0xa
 346 012e C8000000 		.4byte	.LASF22
 347 0132 01       		.byte	0x1
 348 0133 89       		.byte	0x89
 349 0134 83000000 		.4byte	0x83
 350 0138 01       		.uleb128 0x1
 351 0139 51       		.byte	0x51
 352 013a 00       		.byte	0
 353 013b 0B       		.uleb128 0xb
 354 013c 50020000 		.4byte	.LASF23
 355 0140 01       		.byte	0x1
 356 0141 B0       		.byte	0xb0
 357 0142 77000000 		.4byte	0x77
 358 0146 00000000 		.4byte	.LFB3
 359 014a 10000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 11


 360 014e 01       		.uleb128 0x1
 361 014f 9C       		.byte	0x9c
 362 0150 0B       		.uleb128 0xb
 363 0151 1B010000 		.4byte	.LASF24
 364 0155 01       		.byte	0x1
 365 0156 C6       		.byte	0xc6
 366 0157 6B000000 		.4byte	0x6b
 367 015b 00000000 		.4byte	.LFB4
 368 015f 10000000 		.4byte	.LFE4-.LFB4
 369 0163 01       		.uleb128 0x1
 370 0164 9C       		.byte	0x9c
 371 0165 00       		.byte	0
 372              		.section	.debug_abbrev,"",%progbits
 373              	.Ldebug_abbrev0:
 374 0000 01       		.uleb128 0x1
 375 0001 11       		.uleb128 0x11
 376 0002 01       		.byte	0x1
 377 0003 25       		.uleb128 0x25
 378 0004 0E       		.uleb128 0xe
 379 0005 13       		.uleb128 0x13
 380 0006 0B       		.uleb128 0xb
 381 0007 03       		.uleb128 0x3
 382 0008 0E       		.uleb128 0xe
 383 0009 1B       		.uleb128 0x1b
 384 000a 0E       		.uleb128 0xe
 385 000b 55       		.uleb128 0x55
 386 000c 17       		.uleb128 0x17
 387 000d 11       		.uleb128 0x11
 388 000e 01       		.uleb128 0x1
 389 000f 10       		.uleb128 0x10
 390 0010 17       		.uleb128 0x17
 391 0011 00       		.byte	0
 392 0012 00       		.byte	0
 393 0013 02       		.uleb128 0x2
 394 0014 24       		.uleb128 0x24
 395 0015 00       		.byte	0
 396 0016 0B       		.uleb128 0xb
 397 0017 0B       		.uleb128 0xb
 398 0018 3E       		.uleb128 0x3e
 399 0019 0B       		.uleb128 0xb
 400 001a 03       		.uleb128 0x3
 401 001b 0E       		.uleb128 0xe
 402 001c 00       		.byte	0
 403 001d 00       		.byte	0
 404 001e 03       		.uleb128 0x3
 405 001f 24       		.uleb128 0x24
 406 0020 00       		.byte	0
 407 0021 0B       		.uleb128 0xb
 408 0022 0B       		.uleb128 0xb
 409 0023 3E       		.uleb128 0x3e
 410 0024 0B       		.uleb128 0xb
 411 0025 03       		.uleb128 0x3
 412 0026 08       		.uleb128 0x8
 413 0027 00       		.byte	0
 414 0028 00       		.byte	0
 415 0029 04       		.uleb128 0x4
 416 002a 16       		.uleb128 0x16
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 12


 417 002b 00       		.byte	0
 418 002c 03       		.uleb128 0x3
 419 002d 0E       		.uleb128 0xe
 420 002e 3A       		.uleb128 0x3a
 421 002f 0B       		.uleb128 0xb
 422 0030 3B       		.uleb128 0x3b
 423 0031 05       		.uleb128 0x5
 424 0032 49       		.uleb128 0x49
 425 0033 13       		.uleb128 0x13
 426 0034 00       		.byte	0
 427 0035 00       		.byte	0
 428 0036 05       		.uleb128 0x5
 429 0037 35       		.uleb128 0x35
 430 0038 00       		.byte	0
 431 0039 49       		.uleb128 0x49
 432 003a 13       		.uleb128 0x13
 433 003b 00       		.byte	0
 434 003c 00       		.byte	0
 435 003d 06       		.uleb128 0x6
 436 003e 2E       		.uleb128 0x2e
 437 003f 01       		.byte	0x1
 438 0040 3F       		.uleb128 0x3f
 439 0041 19       		.uleb128 0x19
 440 0042 03       		.uleb128 0x3
 441 0043 0E       		.uleb128 0xe
 442 0044 3A       		.uleb128 0x3a
 443 0045 0B       		.uleb128 0xb
 444 0046 3B       		.uleb128 0x3b
 445 0047 0B       		.uleb128 0xb
 446 0048 27       		.uleb128 0x27
 447 0049 19       		.uleb128 0x19
 448 004a 11       		.uleb128 0x11
 449 004b 01       		.uleb128 0x1
 450 004c 12       		.uleb128 0x12
 451 004d 06       		.uleb128 0x6
 452 004e 40       		.uleb128 0x40
 453 004f 18       		.uleb128 0x18
 454 0050 9742     		.uleb128 0x2117
 455 0052 19       		.uleb128 0x19
 456 0053 01       		.uleb128 0x1
 457 0054 13       		.uleb128 0x13
 458 0055 00       		.byte	0
 459 0056 00       		.byte	0
 460 0057 07       		.uleb128 0x7
 461 0058 05       		.uleb128 0x5
 462 0059 00       		.byte	0
 463 005a 03       		.uleb128 0x3
 464 005b 0E       		.uleb128 0xe
 465 005c 3A       		.uleb128 0x3a
 466 005d 0B       		.uleb128 0xb
 467 005e 3B       		.uleb128 0x3b
 468 005f 0B       		.uleb128 0xb
 469 0060 49       		.uleb128 0x49
 470 0061 13       		.uleb128 0x13
 471 0062 02       		.uleb128 0x2
 472 0063 17       		.uleb128 0x17
 473 0064 00       		.byte	0
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 13


 474 0065 00       		.byte	0
 475 0066 08       		.uleb128 0x8
 476 0067 2E       		.uleb128 0x2e
 477 0068 00       		.byte	0
 478 0069 3F       		.uleb128 0x3f
 479 006a 19       		.uleb128 0x19
 480 006b 03       		.uleb128 0x3
 481 006c 0E       		.uleb128 0xe
 482 006d 3A       		.uleb128 0x3a
 483 006e 0B       		.uleb128 0xb
 484 006f 3B       		.uleb128 0x3b
 485 0070 0B       		.uleb128 0xb
 486 0071 27       		.uleb128 0x27
 487 0072 19       		.uleb128 0x19
 488 0073 11       		.uleb128 0x11
 489 0074 01       		.uleb128 0x1
 490 0075 12       		.uleb128 0x12
 491 0076 06       		.uleb128 0x6
 492 0077 40       		.uleb128 0x40
 493 0078 18       		.uleb128 0x18
 494 0079 9742     		.uleb128 0x2117
 495 007b 19       		.uleb128 0x19
 496 007c 00       		.byte	0
 497 007d 00       		.byte	0
 498 007e 09       		.uleb128 0x9
 499 007f 34       		.uleb128 0x34
 500 0080 00       		.byte	0
 501 0081 03       		.uleb128 0x3
 502 0082 0E       		.uleb128 0xe
 503 0083 3A       		.uleb128 0x3a
 504 0084 0B       		.uleb128 0xb
 505 0085 3B       		.uleb128 0x3b
 506 0086 0B       		.uleb128 0xb
 507 0087 49       		.uleb128 0x49
 508 0088 13       		.uleb128 0x13
 509 0089 02       		.uleb128 0x2
 510 008a 17       		.uleb128 0x17
 511 008b 00       		.byte	0
 512 008c 00       		.byte	0
 513 008d 0A       		.uleb128 0xa
 514 008e 34       		.uleb128 0x34
 515 008f 00       		.byte	0
 516 0090 03       		.uleb128 0x3
 517 0091 0E       		.uleb128 0xe
 518 0092 3A       		.uleb128 0x3a
 519 0093 0B       		.uleb128 0xb
 520 0094 3B       		.uleb128 0x3b
 521 0095 0B       		.uleb128 0xb
 522 0096 49       		.uleb128 0x49
 523 0097 13       		.uleb128 0x13
 524 0098 02       		.uleb128 0x2
 525 0099 18       		.uleb128 0x18
 526 009a 00       		.byte	0
 527 009b 00       		.byte	0
 528 009c 0B       		.uleb128 0xb
 529 009d 2E       		.uleb128 0x2e
 530 009e 00       		.byte	0
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 14


 531 009f 3F       		.uleb128 0x3f
 532 00a0 19       		.uleb128 0x19
 533 00a1 03       		.uleb128 0x3
 534 00a2 0E       		.uleb128 0xe
 535 00a3 3A       		.uleb128 0x3a
 536 00a4 0B       		.uleb128 0xb
 537 00a5 3B       		.uleb128 0x3b
 538 00a6 0B       		.uleb128 0xb
 539 00a7 27       		.uleb128 0x27
 540 00a8 19       		.uleb128 0x19
 541 00a9 49       		.uleb128 0x49
 542 00aa 13       		.uleb128 0x13
 543 00ab 11       		.uleb128 0x11
 544 00ac 01       		.uleb128 0x1
 545 00ad 12       		.uleb128 0x12
 546 00ae 06       		.uleb128 0x6
 547 00af 40       		.uleb128 0x40
 548 00b0 18       		.uleb128 0x18
 549 00b1 9742     		.uleb128 0x2117
 550 00b3 19       		.uleb128 0x19
 551 00b4 00       		.byte	0
 552 00b5 00       		.byte	0
 553 00b6 00       		.byte	0
 554              		.section	.debug_loc,"",%progbits
 555              	.Ldebug_loc0:
 556              	.LLST0:
 557 0000 00000000 		.4byte	.LVL0
 558 0004 0C000000 		.4byte	.LVL1
 559 0008 0100     		.2byte	0x1
 560 000a 50       		.byte	0x50
 561 000b 0C000000 		.4byte	.LVL1
 562 000f 1C000000 		.4byte	.LFE0
 563 0013 0400     		.2byte	0x4
 564 0015 F3       		.byte	0xf3
 565 0016 01       		.uleb128 0x1
 566 0017 50       		.byte	0x50
 567 0018 9F       		.byte	0x9f
 568 0019 00000000 		.4byte	0
 569 001d 00000000 		.4byte	0
 570              	.LLST1:
 571 0021 00000000 		.4byte	.LVL2
 572 0025 0C000000 		.4byte	.LVL4
 573 0029 0100     		.2byte	0x1
 574 002b 50       		.byte	0x50
 575 002c 0C000000 		.4byte	.LVL4
 576 0030 20000000 		.4byte	.LFE2
 577 0034 0400     		.2byte	0x4
 578 0036 F3       		.byte	0xf3
 579 0037 01       		.uleb128 0x1
 580 0038 50       		.byte	0x50
 581 0039 9F       		.byte	0x9f
 582 003a 00000000 		.4byte	0
 583 003e 00000000 		.4byte	0
 584              	.LLST2:
 585 0042 00000000 		.4byte	.LVL2
 586 0046 12000000 		.4byte	.LVL6
 587 004a 0100     		.2byte	0x1
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 15


 588 004c 51       		.byte	0x51
 589 004d 12000000 		.4byte	.LVL6
 590 0051 20000000 		.4byte	.LFE2
 591 0055 0400     		.2byte	0x4
 592 0057 F3       		.byte	0xf3
 593 0058 01       		.uleb128 0x1
 594 0059 51       		.byte	0x51
 595 005a 9F       		.byte	0x9f
 596 005b 00000000 		.4byte	0
 597 005f 00000000 		.4byte	0
 598              	.LLST3:
 599 0063 0A000000 		.4byte	.LVL3
 600 0067 10000000 		.4byte	.LVL5
 601 006b 0100     		.2byte	0x1
 602 006d 53       		.byte	0x53
 603 006e 00000000 		.4byte	0
 604 0072 00000000 		.4byte	0
 605              		.section	.debug_aranges,"",%progbits
 606 0000 3C000000 		.4byte	0x3c
 607 0004 0200     		.2byte	0x2
 608 0006 00000000 		.4byte	.Ldebug_info0
 609 000a 04       		.byte	0x4
 610 000b 00       		.byte	0
 611 000c 0000     		.2byte	0
 612 000e 0000     		.2byte	0
 613 0010 00000000 		.4byte	.LFB0
 614 0014 1C000000 		.4byte	.LFE0-.LFB0
 615 0018 00000000 		.4byte	.LFB1
 616 001c 18000000 		.4byte	.LFE1-.LFB1
 617 0020 00000000 		.4byte	.LFB2
 618 0024 20000000 		.4byte	.LFE2-.LFB2
 619 0028 00000000 		.4byte	.LFB3
 620 002c 10000000 		.4byte	.LFE3-.LFB3
 621 0030 00000000 		.4byte	.LFB4
 622 0034 10000000 		.4byte	.LFE4-.LFB4
 623 0038 00000000 		.4byte	0
 624 003c 00000000 		.4byte	0
 625              		.section	.debug_ranges,"",%progbits
 626              	.Ldebug_ranges0:
 627 0000 00000000 		.4byte	.LFB0
 628 0004 1C000000 		.4byte	.LFE0
 629 0008 00000000 		.4byte	.LFB1
 630 000c 18000000 		.4byte	.LFE1
 631 0010 00000000 		.4byte	.LFB2
 632 0014 20000000 		.4byte	.LFE2
 633 0018 00000000 		.4byte	.LFB3
 634 001c 10000000 		.4byte	.LFE3
 635 0020 00000000 		.4byte	.LFB4
 636 0024 10000000 		.4byte	.LFE4
 637 0028 00000000 		.4byte	0
 638 002c 00000000 		.4byte	0
 639              		.section	.debug_line,"",%progbits
 640              	.Ldebug_line0:
 641 0000 B9000000 		.section	.debug_str,"MS",%progbits,1
 641      02004400 
 641      00000201 
 641      FB0E0D00 
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 16


 641      01010101 
 642              	.LASF15:
 643 0000 72656733 		.ascii	"reg32\000"
 643      3200
 644              	.LASF27:
 645 0006 433A5C55 		.ascii	"C:\\Users\\cdrow\\Documents\\GitHub\\Li-CellTesting"
 645      73657273 
 645      5C636472 
 645      6F775C44 
 645      6F63756D 
 646 0034 5F536372 		.ascii	"_Script\\PSOC4_Main\\PSOC4_Main.cydsn\000"
 646      6970745C 
 646      50534F43 
 646      345F4D61 
 646      696E5C50 
 647              	.LASF21:
 648 0058 6D61736B 		.ascii	"maskVal\000"
 648      56616C00 
 649              	.LASF12:
 650 0060 666C6F61 		.ascii	"float\000"
 650      7400
 651              	.LASF16:
 652 0066 436C6F63 		.ascii	"Clock_1_StartEx\000"
 652      6B5F315F 
 652      53746172 
 652      74457800 
 653              	.LASF28:
 654 0076 436C6F63 		.ascii	"Clock_1_Stop\000"
 654      6B5F315F 
 654      53746F70 
 654      00
 655              	.LASF1:
 656 0083 756E7369 		.ascii	"unsigned char\000"
 656      676E6564 
 656      20636861 
 656      7200
 657              	.LASF5:
 658 0091 6C6F6E67 		.ascii	"long unsigned int\000"
 658      20756E73 
 658      69676E65 
 658      6420696E 
 658      7400
 659              	.LASF3:
 660 00a3 73686F72 		.ascii	"short unsigned int\000"
 660      7420756E 
 660      7369676E 
 660      65642069 
 660      6E7400
 661              	.LASF19:
 662 00b6 636C6B44 		.ascii	"clkDivider\000"
 662      69766964 
 662      657200
 663              	.LASF13:
 664 00c1 646F7562 		.ascii	"double\000"
 664      6C6500
 665              	.LASF22:
 666 00c8 72656756 		.ascii	"regVal\000"
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 17


 666      616C00
 667              	.LASF18:
 668 00cf 616C6967 		.ascii	"alignClkDiv\000"
 668      6E436C6B 
 668      44697600 
 669              	.LASF20:
 670 00db 636C6B46 		.ascii	"clkFractional\000"
 670      72616374 
 670      696F6E61 
 670      6C00
 671              	.LASF10:
 672 00e9 75696E74 		.ascii	"uint16\000"
 672      313600
 673              	.LASF11:
 674 00f0 75696E74 		.ascii	"uint32\000"
 674      333200
 675              	.LASF8:
 676 00f7 756E7369 		.ascii	"unsigned int\000"
 676      676E6564 
 676      20696E74 
 676      00
 677              	.LASF7:
 678 0104 6C6F6E67 		.ascii	"long long unsigned int\000"
 678      206C6F6E 
 678      6720756E 
 678      7369676E 
 678      65642069 
 679              	.LASF24:
 680 011b 436C6F63 		.ascii	"Clock_1_GetFractionalDividerRegister\000"
 680      6B5F315F 
 680      47657446 
 680      72616374 
 680      696F6E61 
 681              	.LASF6:
 682 0140 6C6F6E67 		.ascii	"long long int\000"
 682      206C6F6E 
 682      6720696E 
 682      7400
 683              	.LASF14:
 684 014e 63686172 		.ascii	"char\000"
 684      00
 685              	.LASF2:
 686 0153 73686F72 		.ascii	"short int\000"
 686      7420696E 
 686      7400
 687              	.LASF9:
 688 015d 75696E74 		.ascii	"uint8\000"
 688      3800
 689              	.LASF17:
 690 0163 436C6F63 		.ascii	"Clock_1_SetFractionalDividerRegister\000"
 690      6B5F315F 
 690      53657446 
 690      72616374 
 690      696F6E61 
 691              	.LASF4:
 692 0188 6C6F6E67 		.ascii	"long int\000"
 692      20696E74 
ARM GAS  C:\Users\cdrow\AppData\Local\Temp\ccFyaxnW.s 			page 18


 692      00
 693              	.LASF26:
 694 0191 47656E65 		.ascii	"Generated_Source\\PSoC4\\Clock_1.c\000"
 694      72617465 
 694      645F536F 
 694      75726365 
 694      5C50536F 
 695              	.LASF25:
 696 01b2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 696      43313120 
 696      352E342E 
 696      31203230 
 696      31363036 
 697 01e5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 697      20726576 
 697      6973696F 
 697      6E203233 
 697      37373135 
 698 0218 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 698      67202D66 
 698      66756E63 
 698      74696F6E 
 698      2D736563 
 699              	.LASF0:
 700 0244 7369676E 		.ascii	"signed char\000"
 700      65642063 
 700      68617200 
 701              	.LASF23:
 702 0250 436C6F63 		.ascii	"Clock_1_GetDividerRegister\000"
 702      6B5F315F 
 702      47657444 
 702      69766964 
 702      65725265 
 703              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
